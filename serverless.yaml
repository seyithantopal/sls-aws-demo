service: aws-node-typescript
frameworkVersion: '3'

useDotenv: true

package:
  individually: true

plugins:
  - serverless-esbuild
  - serverless-offline

provider:
  name: aws
  runtime: nodejs18.x
  region: eu-central-1
  stage: prod
  apiGateway:
    apiKeys:
      - name: ${sls:stage}_API_KEY
        value: ${env:API_GATEWAY_KEY, 'GX83SFHVFISZDNE4N32L'}
  environment:
    STAGE: ${sls:stage}
  iamRoleStatements: # Define IAM role statements for the entire service
    - Effect: 'Allow'
      Action:
        - 'states:StartExecution'
      Resource: '*'

custom:
  myStage: ${sls:stage, self:provider.stage}
  esbuild:
    sourcemap: false

functions:
  saveUser:
    name: ${self:service}-${sls:stage}-saveUser
    handler: src/users/lambdas/saveUser.handler
    timeout: 30
    events:
      - http:
          method: POST
          path: /users
          private: true
  getUser:
    name: ${self:service}-${sls:stage}-getUser
    handler: src/users/lambdas/getUser.handler
    timeout: 30
    events:
      - http:
          method: GET
          path: /users/{id}
          private: true
  get-user-data:
    name: ${self:service}-${sls:stage}-get-user-data
    handler: src/users/lambdas/get-user-data.handler
    timeout: 120
  create-user:
    name: ${self:service}-${sls:stage}-create-user
    handler: src/users/lambdas/create-user.handler
    timeout: 120
  create-user-trigger:
    name: ${self:service}-${sls:stage}-create-user-trigger
    handler: src/users/lambdas/create-user-trigger.handler
    timeout: 30
    events:
      - http:
          method: POST
          path: /users/create
          private: true

stepFunctions:
  stateMachines:
    createUser: ${file(src/users/usersStepFunctionsServerless.yaml)}
